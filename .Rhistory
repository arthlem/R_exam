B<-matrix(c(1,0,-3,1,1,0,1,0,1), ncol=3)
D<-solve(t(B))
C<-A*D
D
C
B
A
D
data("USArrests")
view(USArrests)
views(USArrests)
View(USArrests)
# Pour cette introduction � l'ACP nous allons utiliser un mini fichier de donn�es
# Ce dataframe contient les mesures (longueur, largeur, hauteur) et le genre
# de 48 tortues.
# Plus d'infos (ex�cuter la commande dans R(-Studio) ou copier-coller l'URL dans
# votre navigateur):
install.packages("ade4");
library(ade4)
library(ade4)
data(tortues)
?tortues
names(tortues)
sexcol <- ifelse(tortues[,"sexe"] == "M", "blue", "red")
# Plot d'une scatterplot matrix des donn�es:
mesures <- tortues[ , 1:3]
pairs(mesures, col=sexcol, pch=19)
#Affichons les matrices de corr�lation:
cor(mesures)
# faire comprendre le but ultime de cette derni�re : la projection dans le
# plan de dispersion maximale (si il existe).
# Les commandes utilis�es ne sont pas � comprendre, mais simplement � utiliser.
###############################################################################
# Utilisation du package rgl permettant de faire de  la visualisation
# 3D interactive.
# T�l�chargement et installation du package (cette commande n'est � ex�cuter
# qu'une seule fois pour un ordinateur donn�):
#install.packages("rgl")
# Chargement de package dans le syst�me:
library(rgl)
# Graphique 3D des 3 premi�res variables des donn�es:
#plot3d(mesures, type = "s", col = sexcol)
#plot3d(scale(mesures, center = TRUE, scale = TRUE), type = "s", col = sexcol)
plot3d(mesures, type = "p",size= 10, col = sexcol)
plot3d(scale(mesures, center = TRUE, scale = TRUE), type = "p",size= 10, col = sexcol)
# "Enveloppe" des donn�es:
plot3d(ellipse3d(cor(mesures),scale=diag(cor(mesures)), col = "grey", alpha = 0.5), add=TRUE)
# Visualisation des 3 premiers axes originaux
lines3d(rbind(c(0,0,0),c(2,0,0)),lwd=4, col="brown")
lines3d(rbind(c(0,0,0),c(0,2,0)),lwd=4, col="blue")
lines3d(rbind(c(0,0,0),c(0,0,2)),lwd=4, col= "green")
# "Jouez" avec le graphe jusqu'� visualiser les donn�es dans leur dispersion
# maximum :)
# Ce plan de dispersion maximale est celui que cherche num�riquement l'ACP
# et ce ind�pendemment du nombre de variables initiales (la visu 3D n'�tant
# pas toujours possible).
#
# Retour � l'ACP
###############################################################################
mesures.CR<-scale(mesures, center = TRUE, scale = TRUE)
###############################################################################
# La partie suivante ne fait pas partie de l'ACP mais elle est destin�e �
# faire comprendre le but ultime de cette derni�re : la projection dans le
# plan de dispersion maximale (si il existe).
# Les commandes utilis�es ne sont pas � comprendre, mais simplement � utiliser.
###############################################################################
# Utilisation du package rgl permettant de faire de  la visualisation
# 3D interactive.
# T�l�chargement et installation du package (cette commande n'est � ex�cuter
# qu'une seule fois pour un ordinateur donn�):
install.packages("rgl")
# Chargement de package dans le syst�me:
library(rgl)
###############################################################################
# La partie suivante ne fait pas partie de l'ACP mais elle est destin�e �
# faire comprendre le but ultime de cette derni�re : la projection dans le
# plan de dispersion maximale (si il existe).
# Les commandes utilis�es ne sont pas � comprendre, mais simplement � utiliser.
###############################################################################
# Utilisation du package rgl permettant de faire de  la visualisation
# 3D interactive.
# T�l�chargement et installation du package (cette commande n'est � ex�cuter
# qu'une seule fois pour un ordinateur donn�):
install.packages("rgl")
# Chargement de package dans le syst�me:
library(rgl)
###############################################################################
# La partie suivante ne fait pas partie de l'ACP mais elle est destin�e �
# faire comprendre le but ultime de cette derni�re : la projection dans le
# plan de dispersion maximale (si il existe).
# Les commandes utilis�es ne sont pas � comprendre, mais simplement � utiliser.
###############################################################################
# Utilisation du package rgl permettant de faire de  la visualisation
# 3D interactive.
# T�l�chargement et installation du package (cette commande n'est � ex�cuter
# qu'une seule fois pour un ordinateur donn�):
install.packages("rgl")
###############################################################################
# La partie suivante ne fait pas partie de l'ACP mais elle est destin�e �
# faire comprendre le but ultime de cette derni�re : la projection dans le
# plan de dispersion maximale (si il existe).
# Les commandes utilis�es ne sont pas � comprendre, mais simplement � utiliser.
###############################################################################
# Utilisation du package rgl permettant de faire de  la visualisation
# 3D interactive.
# T�l�chargement et installation du package (cette commande n'est � ex�cuter
# qu'une seule fois pour un ordinateur donn�):
install.packages("rgl")
# Chargement de package dans le syst�me:
library(rgl)
cov(mesures)
scale(mesures, center=TRUE, scale=TRUE);
# Si on pr�f�re ne pas avoir d'interruption interactive qui demande le nombre
# d'axes, alors on  passe scannf � FALSE et le nombre d'axes � retenir via nf:
acp.ade4<-dudi.pca(mesures, scannf=FALSE, nf=3,center = TRUE, scale = TRUE )
# T�l�chargement et installation du package (cette commande n'est � ex�cuter
# qu'une seule fois pour un ordinateur donn�):
#install.packages("ade4")
# Chargement de package dans la session R:
library(ade4)
# Si on pr�f�re ne pas avoir d'interruption interactive qui demande le nombre
# d'axes, alors on  passe scannf � FALSE et le nombre d'axes � retenir via nf:
acp.ade4<-dudi.pca(mesures, scannf=FALSE, nf=3,center = TRUE, scale = TRUE )
#data(iris)
data("USArrests")
mydata<-USArrests
#install.packages("ade4")# Uncomment if necessary
# Loading :)
library(ade4)
# If you wish to skip the interactive step just set 'scannf' to FALSE and give
# directly the number of axes to keep via nf.
pca<-dudi.pca(mydata[,1:4], scannf=FALSE, nf=4,center = TRUE, scale = TRUE )
cumsum(pca$eig/sum(pca$eig)*100)
inertia.dudi(pca,col.inertia = T)$col.abs
s.corcircle(pca$co, fullcircle = TRUE)
s.corcircle(pca$co, fullcircle = FALSE)
scatter(pca, posieig="none")
scatter(pca, posieig="none", clab.row = 0)
# Adding the new components in the original data frame for using them to
# draw the clustering results
mydata<-cbind(mydata,pca$li)
#install.packages("RcmdrMisc")# Uncomment if necessary
#library(RcmdrMisc)
# KMeans with k=3, 10 iterations for each kmeans, 10 kmeans tried..
km1 <- kmeans(mydata[,1:4], centers = 3, iter.max = 10, nstart = 10)
# Size of the clusters
table(km1$cluster)
# Clusters Centers
km1$centers
# Plot of the clusters
pairs(mydata[,1:4],col=km1$cluster)
# Chargement du package "car" pour utiliser sa fonction scatterplotMatrix
library(car)
scatterplotMatrix(mydata[,1:4],smooth=FALSE,groups=km1$cluster, by.groups=TRUE)
# Representation of clusters in the 2 first principal components
plot(mydata[,c("Axis1","Axis2")], col=km1$cluster, main="K-means")
# Same algorithm, but on scaled data.
km2 <- kmeans(scale(mydata[,1:4],center = TRUE,scale=TRUE), centers = 3, iter.max = 10, nstart = 10)
install.packages("mclust")# Uncomment if necessary
install.packages("mclust")
#load MCLUST library
library(mclust)
################################################################################
# Classifications
# =========================================
################################################################################
#Interactive reading of the external file for mydata data
mydata <- read.table(file.choose(), header=TRUE, sep=";", na.strings="NA", dec=".", strip.white=TRUE)
# Exercise:
# Perform knn, naive abyes, Mclust and SVM classification
# on "Credit Cards Default" data ( https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients )
path <- "./credit_card.csv";
mydata <- read.csv2(path, header=FALSE, dec=".")
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path<- "./supermarket_customers.csv"
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path<- "./supermarket_customers.csv"
supermarkets <- read.csv2(path, header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path<- "supermarket_customers.csv"
supermarkets <- read.csv2(path, header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path <- "supermarket_customers.csv";
supermarkets <- read.csv2(path, header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path <- "./supermarket_customers.csv";
supermarkets <- read.csv2(path, header=TRUE, sep=",", dec=".") #charger le fichier CSV
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Commande pour afficher le CSV des supermarchés
View(supermarkets)
# Exercise:
# Perform knn, naive abyes, Mclust and SVM classification
# on "Credit Cards Default" data ( https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients )
path <- "./credit_card.csv";
mydata <- read.csv2(path, header=FALSE, dec=".")
supermarkets <- read.csv2("./supermarket_customers.csv", header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path <- file.path("./supermarket_customers.csv");
supermarkets <- read.csv2(path, header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
supermarkets <- read.csv2(file="./supermarket_customers.csv", header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
supermarkets <- read.csv2(file="./supermarket_customers", header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
supermarkets <- read.csv2(file="supermarket_customers", header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
supermarkets <- read.csv2(file="supermarket_customers.csv", header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
supermarkets <- read.csv(file="supermarket_customers.csv", header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Pour récupérer les changements
# git pull
supermarkets <- read.csv(file="supermarket_customers.csv", head=TRUE, sep=";") #charger le fichier CSV
supermarkets <- read.csv2(path, head=TRUE, sep=";") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path <- "R_exam/supermarket_customers.csv";
supermarkets <- read.csv2(path, head=TRUE, sep=";") #charger le fichier CSV
#Commande pour afficher le CSV des supermarchés
View(supermarkets)
#Pour récupérer les changements
# git pull
path <- "R_exam/supermarket_customers.csv";
supermarkets <- read.csv2(path, head=TRUE, sep=",") #charger le fichier CSV
#Commande pour afficher le CSV des supermarchés
View(supermarkets)
dir();
#Pour récupérer les changements
# git pull
path <- "./supermarket_customers.csv";
supermarkets <- read.csv2(path, head=TRUE, sep=",") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path <- file.path("f:", "supermarket_customers.csv");
#Pour récupérer les changements
# git pull
path <- file.path("R_exam", "supermarket_customers.csv");
supermarkets <- read.csv2(path, head=TRUE, sep=",") #charger le fichier CSV
#Pour récupérer les changements
# git pull
path <- getwd()+ "supermarket_customers.csv";
#Pour récupérer les changements
# git pull
path <- file.path(getwd(), "supermarket_customers.csv");
supermarkets <- read.csv2(path, head=TRUE, sep=",") #charger le fichier CSV
getwd
#Pour récupérer les changements
# git pull
path <- file.path(getwd(), "supermarket_customers.csv");
getwd()
supermarkets <- read.csv2(file.choose(), head=TRUE, sep=",") #charger le fichier CSV
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Commande pour afficher le CSV des supermarchés
View(supermarkets)
setwd("~/R_exam")
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #charger le fichier CSV
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Commande pour afficher le CSV des supermarchés
#View(supermarkets)
names(supermarkets)
average_all <- colMeans(supermarkets[,c(2:11,15:44)])
average_all
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #charger le fichier CSV
#Commande pour afficher le CSV des supermarchés
#View(supermarkets)
names(supermarkets)
average_all <- colMeans(supermarkets[,c(2:11,15:44)])
average_all
boxplot(supermarkets, col = 2:11)
boxplot(supermarkets, col = (c(2:11,15:44)))
boxplot(supermarkets, col = (c(2:11,15:44)))
boxplot(supermarkets, col = 2)
boxplot(supermarkets, col = 2)
boxplot(supermarkets[,c(2:11,15:44)])
?boxplot
boxplot(supermarkets[,c(2:11,15:44)], horizontal = TRUE)
boxplot(supermarkets[,c(2:11,15:44)], horizontal = TRUE, outline = FALSE)
boxplot(supermarkets[,c(2:11,15:44)], horizontal = TRUE, outline = FALSE,las=2)
old.mar<-par(mar)
old.mar<-par("mar")
old.mar
par(mar=c(5,6,4,2))
boxplot(supermarkets[,c(2:11,15:44)], horizontal = TRUE, outline = FALSE,las=2)
par(mar=c(5,10,4,2))
boxplot(supermarkets[,c(2:11,15:44)], horizontal = TRUE, outline = FALSE,las=2)
boxplot(supermarkets[,c(21,27,33,39)], horizontal = TRUE, outline = FALSE,las=2)
boxplot(supermarkets[,c(15,21,27,33,39)], horizontal = TRUE, outline = FALSE,las=2)
summary(Shop_1)
summary(Shop_1)
summary(Shop_1)
#-----SUMMARY PER SHOP-----
#Shop 1
Shop_1<-supermarkets[,c(15:20)]
summary(Shop_1)
#Shop 1-5 Average price per Shop
boxplot(supermarkets[,c(20,26,32,38,44)], main= "Average price per shop", horizontal = TRUE, outline = FALSE,las=2)
average_all
#Shop 1-5 Average price per Shop
boxplot(supermarkets[,c(20,26,32,38,44)], main= "Average price per shop", horizontal = TRUE, outline = FALSE,las=2)
#Shop 1-5 Average price per Shop
boxplot(supermarkets[,c(20,26,32,38,44)], main= "Average price per shop", horizontal = TRUE, outline = FALSE,las=2)
colnames(supermarkets)[20] <- c("avg price shop1")
#Boxplot par catÃ©gorie (distance_shop1-5)
boxplot(supermarkets[,c(15,21,27,33,39)], main= "Distance to shop", horizontal = TRUE, outline = FALSE,las=2)
#-----SUMMARY PER SHOP-----
#Shop 1
Shop_1<-supermarkets[,c(15:20)]
summary(Shop_1)
View(Shop_1)
View(Shop_1)
View(supermarkets)
View(supermarkets)
#-----Purchases-----
#Médiane sur le nombre total de produit acheté et sur le shop le plus fréquenté
med_purchase <- mdeian(supermarkets[,c(2)])
med_purchase
#-----Purchases-----
#Médiane sur le nombre total de produit acheté et sur le shop le plus fréquenté
med_purchase <- median(supermarkets[,c(2)])
med_purchase
med_shop_used <- median(supermarkets[,c(7)])
med_shop_used
#Moyenne sur le nombre magasin fréquenté et le montant des achats
avg_amount_purchase <- mean(supermarkets[,c(4)])
avg_amount_purchase
avg_shop_used <- mean(supermarkets[,c(7)])
avg_shop_used
#-----Distance-----
#Moyenne sur les distance jusqu'au shop
avg_dist_to_shop <- mean(supermarkets[,c(8)])
avg_dist_to_shop
avg_dist_max_to_shop <- mean(supermarkets[,c(10)])
avg_dist_max_to_shop
avg_dist_min_to_shop <- mean(supermarkets[,c(9)])
avg_dist_min_to_shop
avg_price_purchase <- mean(supermarkets[,c(5)])
avg_price_purchase
avg_price_product <- mean(supermarkets[,c(6)])
avg_price_product
avg_price_shop1 <- mean(supermarkets[,c(20)])
avg_price_shop1
avg_price_shop2 <- mean(supermarkets[,c(26)])
avg_price_shop2
avg_price_shop3 <- mean(supermarkets[,c(32)])
avg_price_shop3
avg_price_shop4 <- mean(supermarkets[,c(38)])
avg_price_shop4
avg_price_shop5 <- mean(supermarkets[,c(44)])
avg_price_shop5
avg_dist_shop1 <- mean(supermarkets[,c(15)])
avg_dist_shop1
avg_dist_shop2 <- mean(supermarkets[,c(21)])
avg_dist_shop2
avg_dist_shop3 <- mean(supermarkets[,c(27)])
avg_dist_shop3
avg_dist_shop4 <- mean(supermarkets[,c(33)])
avg_dist_shop4
avg_dist_shop5 <- mean(supermarkets[,c(39)])
avg_dist_shop5
max_dist_shop1 <- max(supermarkets[,c(15)])
max_dist_shop1
max_dist_shop2 <- max(supermarkets[,c(21)])
max_dist_shop2
max_dist_shop3 <- max(supermarkets[,c(27)])
max_dist_shop3
max_dist_shop4 <- max(supermarkets[,c(33)])
max_dist_shop4
max_dist_shop5 <- max(supermarkets[,c(39)])
max_dist_shop5
sd_amount_purchase <- sd(supermarkets[,c(4)])
sd_amount_purchase
var_unique_product <- var(supermarkets[,c(3)])
var_unique_product
#IMPORT THE DATA
supermarkets <- read.csv2(file.choose(), header=TRUE, sep=",", dec=".") #Load CSV File
#INSPECT THE DATA
#Check the first part of the data
head(supermarkets)
#Check the last part of the data
tail(supermarkets)
#Create Distances sub-DataSet
#11 is not included
distances <- supermarkets[c(8,9,10)]
#Create Prices sub-DataSet
prices <- supermarkets[c(5,6)]
#Create Purchases sub-DataSet, column 12, 13 and 14 not included because these are shop ID's
purchases <- supermarkets[c(2,3,4)]
boxplot(distances, main= "Distances", horizontal = TRUE, outline = FALSE,las=2)
par(mar=c(5,10,4,2))
boxplot(prices, main= "Prices", horizontal = TRUE, outline = FALSE,las=2)
boxplot(purchases, main= "Purchases", horizontal = TRUE, outline = FALSE,las=2)
head(purchases)
tail(purchases)
summary(purchases)
View(purchases)
#View the different column names of the data and their column number
names(supermarkets)
average_all <- colMeans(supermarkets[,c(2:11,15:44)])
average_all
#Changer les marges pour les graphiques
par(mar=c(5,4,4,2))
colnames(supermarkets)[20] <- c("avg price shop1")
#Boxplot par catégorie (distance_shop1-5)
boxplot(supermarkets[,c(15,21,27,33,39)], main= "Distance to shop", horizontal = TRUE, outline = FALSE,las=2)
#Shop 1-5 Products Purchased
boxplot(supermarkets[,c(16,22,28,34,40)], main= "Products Purchased", horizontal = TRUE, outline = FALSE,las=2)
#Shop 1-5 Unique products purchased
boxplot(supermarkets[,c(17,23,29,35,41)], main= "Unique Products Purchased", horizontal = TRUE, outline = FALSE,las=2)
#Shop 1-5 Amount purchases shops
boxplot(supermarkets[,c(18,24,30,36,42)], main= "Amount purchases per shop", horizontal = TRUE, outline = FALSE,las=2)
#Shop 1-5 Average purchased
boxplot(supermarkets[,c(19,25,31,37,43)], main= "Average purchased", horizontal = TRUE, outline = FALSE,las=2)
#Shop 1-5 Average price per Shop
boxplot(supermarkets[,c(20,26,32,38,44)], main= "Average price per shop", horizontal = TRUE, outline = FALSE,las=2)
#-----SUMMARY PER SHOP-----
#Shop 1
Shop_1<-supermarkets[,c(15:20)]
summary(Shop_1)
#Shop 2
Shop_2<-supermarkets[,c(21:26)]
summary(Shop_2)
#Shop 3
Shop_3<-supermarkets[,c(27:32)]
summary(Shop_3)
#Shop 4
Shop_4<-supermarkets[,c(33:38)]
summary(Shop_4)
#Shop 5
Shop_5<-supermarkets[,c(39:44)]
summary(Shop_5)
#Overview of products bougth
boxplot(supermarkets[,c(2)], main="Products Purchased", horizontal = TRUE, outline = FALSE, las=2)
boxplot(supermarkets[,c(3)], main="Unique Products Purchased", horizontal = TRUE, outline = FALSE, las=2)
#-----Purchases-----
#M?diane sur le nombre total de produit achet? et sur le nombre de magasin fr?quent?
med_prod_purchase <- median(supermarkets[,c(2)])
med_prod_purchase
med_shop_used <- median(supermarkets[,c(7)])
med_shop_used
#Moyenne sur le nombre magasin fr?quent? et le montant des achats
avg_amount_purchase <- mean(supermarkets[,c(4)])
avg_amount_purchase
avg_shop_used <- mean(supermarkets[,c(7)])
avg_shop_used
#D?rivation standard sur le montant des achats
sd_amount_purchase <- sd(supermarkets[,c(4)])
sd_amount_purchase
#Variation sur les produits uniques
var_unique_product <- var(supermarkets[,c(3)])
var_unique_product
#-----Distance-----
#Moyenne sur les distance jusqu'au shop
avg_dist_to_shop <- mean(supermarkets[,c(8)])
avg_dist_to_shop
avg_dist_max_to_shop <- mean(supermarkets[,c(10)])
avg_dist_max_to_shop
avg_dist_min_to_shop <- mean(supermarkets[,c(9)])
avg_dist_min_to_shop
#Moyenne des distances par shop
avg_dist_shop1 <- mean(supermarkets[,c(15)])
avg_dist_shop1
avg_dist_shop2 <- mean(supermarkets[,c(21)])
avg_dist_shop2
avg_dist_shop3 <- mean(supermarkets[,c(27)])
avg_dist_shop3
avg_dist_shop4 <- mean(supermarkets[,c(33)])
avg_dist_shop4
avg_dist_shop5 <- mean(supermarkets[,c(39)])
avg_dist_shop5
#Distance maximal par shop
max_dist_shop1 <- max(supermarkets[,c(15)])
max_dist_shop1
max_dist_shop2 <- max(supermarkets[,c(21)])
max_dist_shop2
max_dist_shop3 <- max(supermarkets[,c(27)])
max_dist_shop3
max_dist_shop4 <- max(supermarkets[,c(33)])
max_dist_shop4
max_dist_shop5 <- max(supermarkets[,c(39)])
max_dist_shop5
#-----Price-----
#Moyenne des prix des achats
avg_price_purchase <- mean(supermarkets[,c(5)])
avg_price_purchase
#Moyenne des prix
avg_price_product <- mean(supermarkets[,c(6)])
avg_price_product
#Moyenne des prix par shop
avg_price_shop1 <- mean(supermarkets[,c(20)])
avg_price_shop1
avg_price_shop2 <- mean(supermarkets[,c(26)])
avg_price_shop2
avg_price_shop3 <- mean(supermarkets[,c(32)])
avg_price_shop3
avg_price_shop4 <- mean(supermarkets[,c(38)])
avg_price_shop4
avg_price_shop5 <- mean(supermarkets[,c(44)])
avg_price_shop5
#----A. IMPORT THE DATA----
Onlineretail <- read.csv2(file.choose(), header=TRUE, sep=";", dec=",", row.names = NULL, fileEncoding = "UTF-8-BOM") #Load CSV File
