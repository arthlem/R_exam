countryPerStockCode <- aggregate(OnlineretailUnique$StockCode, by=list(Category=OnlineretailUnique$Country), FUN=length)
names(countryPerStockCode) <- c("Country","NbOfProduct")
#Create a dataset with aggregate() by combining the Country with the Quantity*UnitPrice and then change the variables names with names()
countryPerPurchases <- aggregate(OnlineretailUnique$Quantity*OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$Country), FUN=sum)
names(countryPerPurchases) <- c("Country","Turnover")
#Create a dataset with aggregate() by combining the Country with the nbOfCustomers and then change the variables names with names()
countryPerCustomers <- aggregate(OnlineretailUnique$CustomerID, by=list(Category=OnlineretailUnique$Country), FUN=length)
names(countryPerCustomers) <- c("Country","NbOfCustomers")
#Merge the dataset to make countryData
countryData <- merge(countryPerStockCode, countryPerPurchases, by="Country")
countryData <- merge(countryData, countryPerCustomers, by="Country")
row.names(countryData) <- countryData$Country
countryData <- countryData[2:4]
#----B. GET INTO PCA----
productData.CR<-scale(productData,center=TRUE,scale=TRUE)
pca <- princomp(productData.CR)
summary(pca)
plot(pca)
loadings(pca)
pairs(productData)
View(productData)
View(productData)
#Same without UK
countryDataWithoutUK <- subset(countryData, !(rownames(countryData) %in% "United Kingdom"))
countryDataWithoutUK.CR<-scale(countryDataWithoutUK,center=TRUE,scale=TRUE)
pca3 <- princomp(countryDataWithoutUK.CR)
summary(pca3)
countryData.CR<-scale(countryData,center=TRUE,scale=TRUE)
pca2 <- princomp(countryData.CR)
summary(pca2)
plot(pca3)
loadings(pca3)
pairs(countryDataWithoutUK)
#Create a dataset with aggregate() by combining the StockCode with the nbOfCountry and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
names(stockPerCountry) <- c("StockCode","NbOfCountry")
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerCountry, by="StockCode")
View(productData)
View(productData)
row.names(productData) <- productData$StockCode
productData <- productData[2:5]
View(productData)
View(productData)
#Create a dataset per product (StockCode // sum of Quantity / Turnover[Quantity*UnitPrice] / Count of Customers)
#Create a dataset with aggregate() by combining the StockCode with the Quantity and then change the variables names with names()
stockPerQuantity <- aggregate(OnlineretailUnique$Quantity, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerQuantity) <- c("StockCode","Quantity")
#Create a dataset with aggregate() by combining the StockCode with the Quantity*UnitPrice and then change the variables names with names()
stockPerPurchases <- aggregate(OnlineretailUnique$Quantity*OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerPurchases) <- c("StockCode","Purchases")
#Create a dataset with aggregate() by combining the StockCode with the nbOfCustomers and then change the variables names with names()
stockPerCustomers <- aggregate(OnlineretailUnique$CustomerID, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
names(stockPerCustomers) <- c("StockCode","NbOfCustomers")
#Create a dataset with aggregate() by combining the StockCode with the nbOfCountry and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
names(stockPerCountry) <- c("StockCode","NbOfCountry")
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerCountry, by="StockCode")
#Create a dataset with aggregate() by combining the Country with the UnitPrice and then change the variables names with names()
countryPerUnitPrice <- aggregate(OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$Country), FUN=mean)
names(countryPerUnitPrice) <- c("Country","UnitPrice")
#Merge the dataset to make countryData
countryData <- merge(countryPerStockCode, countryPerPurchases, by="Country")
#----A. IMPORT THE DATA----
Onlineretail <- read.csv2(file.choose(), header=TRUE, sep=";", dec=",", row.names = NULL, fileEncoding = "UTF-8-BOM") #Load CSV File
#----B. DATA CLEANING----
#Removing the missing variables (CustomerID that are empty)
OnlineretailClean <- subset(Onlineretail, CustomerID != "")
OnlineretailClean <- subset(OnlineretailClean, grepl("^(?!C).*$", OnlineretailClean$InvoiceNo, perl = TRUE))
#Remove POSTAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "POST")
#Remove Discount
OnlineretailClean <- subset(OnlineretailClean, StockCode != "D")
#Remove CARRIAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "C2")
#Remove Manual
OnlineretailClean <- subset(OnlineretailClean, StockCode != "M")
#Remove Bank Charges
OnlineretailClean <- subset(OnlineretailClean, StockCode != "BANK CHARGES")
#Remove PADS TO MATCH ALL CUSHIONS
OnlineretailClean <- subset(OnlineretailClean, StockCode != "PADS")
#Remove DOTCOM POSTAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "DOT")
#Remove Unit Price <= 0
OnlineretailClean <- subset(OnlineretailClean, UnitPrice > 0)
#Remove Quantity < 0
OnlineretailClean <- subset(OnlineretailClean, Quantity > 0)
#Remove Duplicates
OnlineretailUnique <- unique(OnlineretailClean)
#Create a dataset per product (StockCode // sum of Quantity / Turnover[Quantity*UnitPrice] / Count of Customers)
#Create a dataset with aggregate() by combining the StockCode with the Quantity and then change the variables names with names()
stockPerQuantity <- aggregate(OnlineretailUnique$Quantity, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerQuantity) <- c("StockCode","Quantity")
#Create a dataset with aggregate() by combining the StockCode with the Quantity*UnitPrice and then change the variables names with names()
stockPerPurchases <- aggregate(OnlineretailUnique$Quantity*OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerPurchases) <- c("StockCode","Purchases")
#Create a dataset with aggregate() by combining the StockCode with the NbOfCustomers and then change the variables names with names()
stockPerCustomers <- aggregate(OnlineretailUnique$CustomerID, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
names(stockPerCustomers) <- c("StockCode","NbOfCustomers")
#Create a dataset with aggregate() by combining the StockCode with the UnitPrice and then change the variables names with names()
stockPerUnitPrice <- aggregate(OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$StockCode), FUN=mean)
names(stockPerUnitPrice) <- c("StockCode","UnitPrice")
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerUnitPrice, by="StockCode")
row.names(productData) <- productData$StockCode
productData <- productData[2:5]
View(productData)
#----B. GET INTO PCA----
productData.CR<-scale(productData,center=TRUE,scale=TRUE)
pca <- princomp(productData.CR)
summary(pca)
plot(pca)
loadings(pca)
pairs(productData)
#----A. IMPORT THE DATA----
Onlineretail <- read.csv2(file.choose(), header=TRUE, sep=";", dec=",", row.names = NULL, fileEncoding = "UTF-8-BOM") #Load CSV File
#----B. DATA CLEANING----
#Removing the missing variables (CustomerID that are empty)
OnlineretailClean <- subset(Onlineretail, CustomerID != "")
OnlineretailClean <- subset(OnlineretailClean, grepl("^(?!C).*$", OnlineretailClean$InvoiceNo, perl = TRUE))
#Remove POSTAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "POST")
#Remove Discount
OnlineretailClean <- subset(OnlineretailClean, StockCode != "D")
#Remove CARRIAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "C2")
#Remove Manual
OnlineretailClean <- subset(OnlineretailClean, StockCode != "M")
#Remove Bank Charges
OnlineretailClean <- subset(OnlineretailClean, StockCode != "BANK CHARGES")
#Remove PADS TO MATCH ALL CUSHIONS
OnlineretailClean <- subset(OnlineretailClean, StockCode != "PADS")
#Remove DOTCOM POSTAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "DOT")
#Remove Unit Price <= 0
OnlineretailClean <- subset(OnlineretailClean, UnitPrice > 0)
#Remove Quantity < 0
OnlineretailClean <- subset(OnlineretailClean, Quantity > 0)
#Remove Duplicates
OnlineretailUnique <- unique(OnlineretailClean)
#Create a dataset per product (StockCode // sum of Quantity / Turnover[Quantity*UnitPrice] / Count of Customers)
#Create a dataset with aggregate() by combining the StockCode with the Quantity and then change the variables names with names()
stockPerQuantity <- aggregate(OnlineretailUnique$Quantity, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerQuantity) <- c("StockCode","Quantity")
#Create a dataset with aggregate() by combining the StockCode with the Quantity*UnitPrice and then change the variables names with names()
stockPerPurchases <- aggregate(OnlineretailUnique$Quantity*OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerPurchases) <- c("StockCode","Purchases")
#Create a dataset with aggregate() by combining the StockCode with the Quantity*UnitPrice and then change the variables names with names()
stockPerCustomers <- aggregate(OnlineretailUnique$CustomerID, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
names(stockPerCustomers) <- c("StockCode","NbOfCustomers")
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
row.names(productData) <- productData$StockCode
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
#Create a dataset with aggregate() by combining the StockCode with the UnitPrice and then change the variables names with names()
stockPerUnitPrice <- aggregate(OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$StockCode), FUN=mean)
names(stockPerUnitPrice) <- c("StockCode","Avg UnitPrice")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerUnitPrice, by="StockCode")
row.names(productData) <- productData$StockCode
productData <- productData[2:5]
View(productData)
#----B. GET INTO PCA----
productData.CR<-scale(productData,center=TRUE,scale=TRUE)
pca <- princomp(productData.CR)
summary(pca)
plot(pca)
loadings(pca)
pairs(productData)
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerUnitPrice, by="StockCode")
productData <- merge(productData, stockPerCountry, by="StockCode")
row.names(productData) <- productData$StockCode
productData <- productData[2:6]
#Create a dataset with aggregate() by combining the StockCode with the Country and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
names(stockPerCountry) <- c("StockCode","NbOfCountry")
productData <- merge(productData, stockPerCountry, by="StockCode")
productData <- productData[2:6]
View(stockPerCountry)
#Create a dataset with aggregate() by combining the StockCode with the Country and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=count)
?aggregate
row.names(productData) <- productData$StockCode
#Create a dataset per product (StockCode // sum of Quantity / Turnover[Quantity*UnitPrice] / Count of Customers)
#Create a dataset with aggregate() by combining the StockCode with the Quantity and then change the variables names with names()
stockPerQuantity <- aggregate(OnlineretailUnique$Quantity, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
#----A. IMPORT THE DATA----
Onlineretail <- read.csv2(file.choose(), header=TRUE, sep=";", dec=",", row.names = NULL, fileEncoding = "UTF-8-BOM") #Load CSV File
#----B. DATA CLEANING----
#Removing the missing variables (CustomerID that are empty)
OnlineretailClean <- subset(Onlineretail, CustomerID != "")
OnlineretailClean <- subset(OnlineretailClean, grepl("^(?!C).*$", OnlineretailClean$InvoiceNo, perl = TRUE))
#Remove POSTAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "POST")
#Remove Discount
OnlineretailClean <- subset(OnlineretailClean, StockCode != "D")
#Remove CARRIAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "C2")
#Remove Manual
OnlineretailClean <- subset(OnlineretailClean, StockCode != "M")
#Remove Bank Charges
OnlineretailClean <- subset(OnlineretailClean, StockCode != "BANK CHARGES")
#Remove PADS TO MATCH ALL CUSHIONS
OnlineretailClean <- subset(OnlineretailClean, StockCode != "PADS")
#Remove DOTCOM POSTAGE
OnlineretailClean <- subset(OnlineretailClean, StockCode != "DOT")
#Remove Unit Price <= 0
OnlineretailClean <- subset(OnlineretailClean, UnitPrice > 0)
#Remove Quantity < 0
OnlineretailClean <- subset(OnlineretailClean, Quantity > 0)
#Remove Duplicates
OnlineretailUnique <- unique(OnlineretailClean)
#Create a dataset per product (StockCode // sum of Quantity / Turnover[Quantity*UnitPrice] / Count of Customers)
#Create a dataset with aggregate() by combining the StockCode with the Quantity and then change the variables names with names()
stockPerQuantity <- aggregate(OnlineretailUnique$Quantity, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerQuantity) <- c("StockCode","Quantity")
#Create a dataset with aggregate() by combining the StockCode with the Quantity*UnitPrice and then change the variables names with names()
stockPerPurchases <- aggregate(OnlineretailUnique$Quantity*OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$StockCode), FUN=sum)
names(stockPerPurchases) <- c("StockCode","Purchases")
#Create a dataset with aggregate() by combining the StockCode with the NbOfCustomers and then change the variables names with names()
stockPerCustomers <- aggregate(OnlineretailUnique$CustomerID, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
names(stockPerCustomers) <- c("StockCode","NbOfCustomers")
#Create a dataset with aggregate() by combining the StockCode with the UnitPrice and then change the variables names with names()
stockPerUnitPrice <- aggregate(OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$StockCode), FUN=mean)
names(stockPerUnitPrice) <- c("StockCode","Avg UnitPrice")
#Create a dataset with aggregate() by combining the StockCode with the Country and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=count)
names(stockPerCountry) <- c("StockCode","NbOfCountry")
View(stockPerUnitPrice)
#Create a dataset with aggregate() by combining the StockCode with the Country and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=lenght)
#Create a dataset with aggregate() by combining the StockCode with the Country and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=length)
View(stockPerCountry)
names(stockPerCountry) <- c("StockCode","NbOfCountry")
#Create a dataset with aggregate() by combining the StockCode with the Country and then change the variables names with names()
stockPerCountry <- aggregate(OnlineretailUnique$Country, by=list(Category=OnlineretailUnique$StockCode), FUN=function(x) length(unique(x)))
#Create a dataset with aggregate() by combining the StockCode with the NbOfCustomers and then change the variables names with names()
stockPerCustomers <- aggregate(OnlineretailUnique$CustomerID, by=list(Category=OnlineretailUnique$StockCode), FUN=function(x) length(unique(x)))
names(stockPerCustomers) <- c("StockCode","NbOfCustomers")
names(stockPerCountry) <- c("StockCode","NbOfCountry")
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerUnitPrice, by="StockCode")
productData <- merge(productData, stockPerCountry, by="StockCode")
row.names(productData) <- productData$StockCode
productData <- productData[2:6]
View(productData)
#----B. GET INTO PCA----
productData.CR<-scale(productData,center=TRUE,scale=TRUE)
pca <- princomp(productData.CR)
summary(pca)
plot(pca)
loadings(pca)
pairs(productData)
?princomp
cor(productData)
plot3d(productData, type = "p",size= 10)
library(ade4)
plot3d(productData, type = "p",size= 10)
Covar<-cov(productData.CR)
View(Covar)
View(Covar)
biplot(pca)
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerUnitPrice, by="StockCode")
row.names(productData) <- productData$StockCode
productData <- productData[2:5]
#Center and scale data
productData.CR<-scale(productData,center=TRUE,scale=TRUE)
#Perform the pca and returns the results as an object
pca <- princomp(productData.CR)
biplot(pca)
#Merge the dataset to make productData
productData <- merge(stockPerQuantity, stockPerPurchases, by="StockCode")
productData <- merge(productData, stockPerCustomers, by="StockCode")
productData <- merge(productData, stockPerUnitPrice, by="StockCode")
productData <- merge(productData, stockPerCountry, by="StockCode")
row.names(productData) <- productData$StockCode
productData <- productData[2:6]
#Center and scale data
productData.CR<-scale(productData,center=TRUE,scale=TRUE)
#Perform the pca and returns the results as an object
pca <- princomp(productData.CR)
View(Covar)
View(Covar)
acp.ade4<-dudi.pca(productData, scannf=FALSE, nf=3,center = TRUE, scale = TRUE)
# Impression des valeurs propres
acp.ade4$eig
# Les variances cumulées
cumsum(acp.ade4$eig)
# Les variances en pourcentages:
acp.ade4$eig/sum(acp.ade4$eig)*100
# Le screeplot:
barplot(acp.ade4$eig/sum(acp.ade4$eig)*100)
# Les pourcentages cumulés :
cumsum(acp.ade4$eig/sum(acp.ade4$eig)*100)
#décompostion l'inertie (la part de la variance totale
# expliquée) entre les variables et composantes (en 10000 èmes):
inertia.dudi(acp.ade4,col.inertia = T)$col.abs
acp.ade4<-dudi.pca(productData, scannf=FALSE, nf=5,center = TRUE, scale = TRUE)
# Impression des valeurs propres
acp.ade4$eig
acp.ade4<-dudi.pca(productData, scannf=FALSE,center = TRUE, scale = TRUE)
# Impression des valeurs propres
acp.ade4$eig
score(acp.ade4, xax=1)
score(acp.ade4, xax=2)
s.corcircle(acp.ade4$co)
scatter(acp.ade4)
scatter(acp.ade4, posieig="none", clab.row=0)
# Impression des valeurs propres
pcaProductAde4$eig
#Utilisation de la librairie ade4 pour l'acp
pcaProductAde4<-dudi.pca(productData, scannf=FALSE,center = TRUE, scale = TRUE)
# Impression des valeurs propres
pcaProductAde4$eig
#Cercles de correlation où la longueur des flèches indique la part de leur information représentée par les deux axes:
# L'angle entre deux  flèches représente la corrélation qui les lie :
# - angle aigu = positive;
# - angle droit = nulle;
# - angle obtus = négative.
s.corcircle(pcaProductAde4$co)
#Projections finale
biplot(pcaProduct)
#Center and scale data
productData.CR<-scale(productData,center=TRUE,scale=TRUE)
#Perform the pca and returns the results as an object
pcaProduct <- princomp(productData.CR)
#Projections finale
biplot(pcaProduct)
#visuel du summary
plot(pcaProduct)
#Variance-covariance des variables centré et réduite
covarProduct<-cov(productData.CR)
View(covarProduct)
View(covarProduct)
#Utilisation de la librairie ade4 pour l'acp
pcaProductAde4<-dudi.pca(productData, scannf=FALSE,center = TRUE, scale = TRUE)
library(ade4)
#Utilisation de la librairie ade4 pour l'acp
pcaProductAde4<-dudi.pca(productData, scannf=FALSE,center = TRUE, scale = TRUE)
# Impression des valeurs propres
pcaProductAde4$eig
# Les variances cumulées
cumsum(pcaProductAde4$eig)
# Les variances en pourcentages:
pcaProductAde4$eig/sum(pcaProductAde4$eig)*100
# Le screeplot:
barplot(pcaProductAde4$eig/sum(pcaProductAde4$eig)*100)
# Les pourcentages cumulés :
cumsum(pcaProductAde4$eig/sum(pcaProductAde4$eig)*100)
#décompostion l'inertie (la part de la variance totale expliquée) entre les variables et composantes (en 10000 èmes):
inertia.dudi(pcaProductAde4,col.inertia = T)$col.abs
# Ces graphiques permettent de voir les liaisons entre les composantes et les variables.
score(pcaProductAde4, xax=1)
score(pcaProductAde4, xax=2)
#Cercles de correlation où la longueur des flèches indique la part de leur information représentée par les deux axes:
# L'angle entre deux  flèches représente la corrélation qui les lie :
# - angle aigu = positive;
# - angle droit = nulle;
# - angle obtus = négative.
s.corcircle(pcaProductAde4$co)
# Le screeplot:
barplot(pcaProductAde4$eig/sum(pcaProductAde4$eig)*100)
#décompostion l'inertie (la part de la variance totale expliquée) entre les variables et composantes (en 10000 èmes):
inertia.dudi(pcaProductAde4,col.inertia = T)$col.abs
#--------------------PCA FOR COUNTRY----------------
#Plot of a matrix of data
pairs(CountryData)
#Create a dataset per Country (Country // NbOfProduct/Purchases/NbOfCustomers)
#Create a dataset with aggregate() by combining the Country with the nbOfStockCode and then change the variables names with names()
countryPerStockCode <- aggregate(OnlineretailUnique$StockCode, by=list(Category=OnlineretailUnique$Country), FUN=length)
names(countryPerStockCode) <- c("Country","NbOfProduct")
#Create a dataset with aggregate() by combining the Country with the Quantity*UnitPrice and then change the variables names with names()
countryPerPurchases <- aggregate(OnlineretailUnique$Quantity*OnlineretailUnique$UnitPrice, by=list(Category=OnlineretailUnique$Country), FUN=sum)
names(countryPerPurchases) <- c("Country","Turnover")
#Create a dataset with aggregate() by combining the Country with the nbOfCustomers and then change the variables names with names()
countryPerCustomers <- aggregate(OnlineretailUnique$CustomerID, by=list(Category=OnlineretailUnique$Country), FUN=length)
names(countryPerCustomers) <- c("Country","NbOfCustomers")
#Merge the dataset to make countryData
countryData <- merge(countryPerStockCode, countryPerPurchases, by="Country")
countryData <- merge(countryData, countryPerCustomers, by="Country")
row.names(countryData) <- countryData$Country
countryData <- countryData[2:4]
p
#--------------------PCA FOR COUNTRY----------------
#Plot of a matrix of data
pairs(CountryData)
#--------------------PCA FOR COUNTRY----------------
#Plot of a matrix of data
pairs(countryData)
#--------------------PCA FOR COUNTRY----------------
#Plot of a matrix of data
pairs(countryData)
#Returns the matrix of correlations (purement informatif)
cor(countryData)
#Center and scale data
countryData.CR<-scale(countryData,center=TRUE,scale=TRUE)
#Perform the pca and returns the results as an object
pcaContry <- princomp(countryData.CR)
#Variance-covariance des variables centré et réduite
covarCountry<-cov(countryData.CR)
#valeurs propres et pourcentage d'info dans les composantes
summary(pcaCountry)
#Perform the pca and returns the results as an object
pcaCountry <- princomp(countryData.CR)
#valeurs propres et pourcentage d'info dans les composantes
summary(pcaCountry)
#Cercles de correlation où la longueur des flèches indique la part de leur information représentée par les deux axes:
# L'angle entre deux  flèches représente la corrélation qui les lie :
# - angle aigu = positive;
# - angle droit = nulle;
# - angle obtus = négative.
s.corcircle(pcaCountryWithoutUK$co)
#--------------------PCA FOR COUNTRY WITHOUT UK----------------
#Same without UK
countryDataWithoutUK <- subset(countryData, !(rownames(countryData) %in% "United Kingdom"))
countryDataWithoutUK.CR<-scale(countryDataWithoutUK,center=TRUE,scale=TRUE)
pca3 <- princomp(countryDataWithoutUK.CR)
summary(pca3)
plot(pca3)
loadings(pca3)
pairs(countryDataWithoutUK)
View(countryDataWithoutUK)
#Remove UK from the dataset
countryDataWithoutUK <- subset(countryData, !(rownames(countryData) %in% "United Kingdom"))
#Plot of a matrix of data
pairs(countryDataWithoutUK)
#Center and scale data
countryDataWithoutUK.CR<-scale(countryDataWithoutUK,center=TRUE,scale=TRUE)
#Perform the pca and returns the results as an object
pcaContryWithoutUK <- princomp(countryDataWithoutUK.CR)
#Variance-covariance des variables centré et réduite
covarCountryWithoutUK<-cov(countryDataWithoutUK.CR)
#valeurs propres et pourcentage d'info dans les composantes
summary(pcaCountryWithoutUK)
#Perform the pca and returns the results as an object
pcaContryWithoutUK <- princomp(countryDataWithoutUK.CR)
#valeurs propres et pourcentage d'info dans les composantes
summary(pcaCountryWithoutUK)
#Perform the pca and returns the results as an object
pcaContryWithoutUK <- princomp(countryDataWithoutUK.CR)
#Perform the pca and returns the results as an object
pcaCountryWithoutUK <- princomp(countryDataWithoutUK.CR)
#Variance-covariance des variables centré et réduite
covarCountryWithoutUK<-cov(countryDataWithoutUK.CR)
#valeurs propres et pourcentage d'info dans les composantes
summary(pcaCountryWithoutUK)
#visuel du summary
plot(pcaCountryWithoutUK)
#poids des variables originelles dans les composantes
loadings(pcaCountryWithoutUK)
#Projections finale
biplot(pcaCountryWithoutUK)
#Utilisation de la librairie ade4 pour l'acp
pcaCountryWithoutUKAde4<-dudi.pca(countryDataWithoutUK, scannf=FALSE,center = TRUE, scale = TRUE)
# Impression des valeurs propres
pcaCountryWithoutUK$eig
# Les variances cumulées
cumsum(pcaCountryWithoutUK$eig)
# Les variances en pourcentages:
pcaCountryWithoutUK$eig/sum(pcaCountryWithoutUK$eig)*100
# Le screeplot:
barplot(pcaCountryWithoutUK$eig/sum(pcaCountryWithoutUK$eig)*100)
# Les variances cumulées
cumsum(pcaCountryWithoutUK$eig)
# Impression des valeurs propres
pcaCountryWithoutUK$eig
#Utilisation de la librairie ade4 pour l'acp
pcaCountryWithoutUKAde4<-dudi.pca(countryDataWithoutUK, scannf=FALSE,center = TRUE, scale = TRUE)
# Les variances en pourcentages:
pcaCountryWithoutUK$eig/sum(pcaCountryWithoutUK$eig)*100
# Les pourcentages cumulés :
cumsum(pcaProductAde4$eig/sum(pcaProductAde4$eig)*100)
score(pcaCountryWithoutUK, xax=2)
#Perform the pca and returns the results as an object
pcaCountryWithoutUK <- princomp(countryDataWithoutUK.CR)
#valeurs propres et pourcentage d'info dans les composantes
summary(pcaCountryWithoutUK)
#visuel du summary
plot(pcaCountryWithoutUK)
#poids des variables originelles dans les composantes
loadings(pcaCountryWithoutUK)
#Plot of a matrix of data
pairs(countryDataWithoutUK)
summary(pca3)
#valeurs propres et pourcentage d'info dans les composantes
summary(pcaCountryWithoutUK)
#----A. IMPORT THE DATA----
Onlineretail <- read.csv2(file.choose(), header=TRUE, sep=";", dec=",", row.names = NULL, fileEncoding = "UTF-8-BOM") #Load CSV File
#----A. IMPORT THE DATA----
Onlineretail <- read.csv2(file.choose(), header=TRUE, sep=";", dec=",", row.names = NULL, fileEncoding = "UTF-8-BOM") #Load CSV File
View(Onlineretail)
